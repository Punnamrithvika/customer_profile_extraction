{"ast":null,"code":"import axios from 'axios';\nimport { saveAs } from 'file-saver';\n\n// Use environment variable for the API URL, fallback to localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst apiClient = axios.create({\n  baseURL: `${API_URL}/api`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// ✅ Modified: Upload multiple profiles (folder of resumes)\nexport const uploadProfiles = async (files, token) => {\n  const formData = new FormData();\n  files.forEach(file => {\n    formData.append('files', file); // Backend must expect 'files' as a list\n  });\n  const headers = {\n    'Content-Type': 'multipart/form-data'\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  const response = await apiClient.post('/upload-multiple', formData, {\n    headers\n  });\n  return response.data;\n};\n\n// ✅ Unchanged: Get all parsed profiles with optional search\nexport const getProfiles = async (search = '') => {\n  const params = new URLSearchParams();\n  if (search) {\n    params.append('search', search);\n  }\n  const response = await apiClient.get(`/?${params.toString()}`);\n  return response.data;\n};\n\n// ✅ Unchanged: Export CSV of profiles\nexport const exportProfiles = async (search = '') => {\n  const params = new URLSearchParams();\n  if (search) {\n    params.append('search', search);\n  }\n  const response = await apiClient.get(`/export-csv?${params.toString()}`, {\n    responseType: 'blob'\n  });\n  saveAs(response.data, 'profiles.csv');\n};","map":{"version":3,"names":["axios","saveAs","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","uploadProfiles","files","token","formData","FormData","forEach","file","append","response","post","data","getProfiles","search","params","URLSearchParams","get","toString","exportProfiles","responseType"],"sources":["C:/Users/rithv/resume-parser/frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\nimport { saveAs } from 'file-saver';\n\n// Use environment variable for the API URL, fallback to localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst apiClient = axios.create({\n    baseURL: `${API_URL}/api`,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// ✅ Modified: Upload multiple profiles (folder of resumes)\nexport const uploadProfiles = async (files, token) => {\n    const formData = new FormData();\n    files.forEach(file => {\n        formData.append('files', file); // Backend must expect 'files' as a list\n    });\n\n    const headers = {\n        'Content-Type': 'multipart/form-data',\n    };\n    if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    const response = await apiClient.post('/upload-multiple', formData, { headers });\n    return response.data;\n};\n\n// ✅ Unchanged: Get all parsed profiles with optional search\nexport const getProfiles = async (search = '') => {\n    const params = new URLSearchParams();\n    if (search) {\n        params.append('search', search);\n    }\n    const response = await apiClient.get(`/?${params.toString()}`);\n    return response.data;\n};\n\n// ✅ Unchanged: Export CSV of profiles\nexport const exportProfiles = async (search = '') => {\n    const params = new URLSearchParams();\n    if (search) {\n        params.append('search', search);\n    }\n    const response = await apiClient.get(`/export-csv?${params.toString()}`, {\n        responseType: 'blob',\n    });\n    saveAs(response.data, 'profiles.csv');\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,YAAY;;AAEnC;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,MAAMC,SAAS,GAAGN,KAAK,CAACO,MAAM,CAAC;EAC3BC,OAAO,EAAE,GAAGN,OAAO,MAAM;EACzBO,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,KAAK,EAAEC,KAAK,KAAK;EAClD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BH,KAAK,CAACI,OAAO,CAACC,IAAI,IAAI;IAClBH,QAAQ,CAACI,MAAM,CAAC,OAAO,EAAED,IAAI,CAAC,CAAC,CAAC;EACpC,CAAC,CAAC;EAEF,MAAMP,OAAO,GAAG;IACZ,cAAc,EAAE;EACpB,CAAC;EACD,IAAIG,KAAK,EAAE;IACPH,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUG,KAAK,EAAE;EAChD;EAEA,MAAMM,QAAQ,GAAG,MAAMZ,SAAS,CAACa,IAAI,CAAC,kBAAkB,EAAEN,QAAQ,EAAE;IAAEJ;EAAQ,CAAC,CAAC;EAChF,OAAOS,QAAQ,CAACE,IAAI;AACxB,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,MAAM,GAAG,EAAE,KAAK;EAC9C,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EACpC,IAAIF,MAAM,EAAE;IACRC,MAAM,CAACN,MAAM,CAAC,QAAQ,EAAEK,MAAM,CAAC;EACnC;EACA,MAAMJ,QAAQ,GAAG,MAAMZ,SAAS,CAACmB,GAAG,CAAC,KAAKF,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC;EAC9D,OAAOR,QAAQ,CAACE,IAAI;AACxB,CAAC;;AAED;AACA,OAAO,MAAMO,cAAc,GAAG,MAAAA,CAAOL,MAAM,GAAG,EAAE,KAAK;EACjD,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EACpC,IAAIF,MAAM,EAAE;IACRC,MAAM,CAACN,MAAM,CAAC,QAAQ,EAAEK,MAAM,CAAC;EACnC;EACA,MAAMJ,QAAQ,GAAG,MAAMZ,SAAS,CAACmB,GAAG,CAAC,eAAeF,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE;IACrEE,YAAY,EAAE;EAClB,CAAC,CAAC;EACF3B,MAAM,CAACiB,QAAQ,CAACE,IAAI,EAAE,cAAc,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}